{"version":3,"sources":["reducers/user.js","actions/index.js","reducers/wallet.js","reducers/index.js","store/store.js","pages/Login.jsx","components/Currency.jsx","components/Category.jsx","components/Description.jsx","data/arrayMethods.js","components/Method.jsx","components/Price.jsx","components/Header.jsx","components/WalletTable.jsx","pages/Wallet.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","currencies","expenses","rootReducer","combineReducers","wallet","currency","expenseObj","ObjRemainder","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","password","isLoginButtonDisabled","bind","onInputChange","loginImage","target","name","value","this","setState","length","test","src","className","alt","loginFunc","props","htmlFor","id","data-testid","onChange","to","disabled","onClick","React","Component","connect","dispatch","toLogin","Currency","Object","keys","filter","elem","map","key","defaultProps","Category","categories","tag","category","idx","Description","description","arrayMethods","Method","method","Price","Header","sommationValue","reduce","acc","curr","exchangeRates","ask","toFixed","WalletTable","generateExpense","expenseDeletionButton","expenseEditButton","expenseDeletion","Number","editExpense","find","console","log","split","totalExpenses","obj","Wallet","saveCurrencyButton","currencyFetch","expenseSaved","fetch","then","res","json","App","path","element","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9c42e47f.chunk.js","sourcesContent":["// Esse reducer será responsável por tratar as informações da pessoa usuária\n\nimport { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN:\n    return { ...state, email: action.email };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Coloque aqui suas actions\nexport const LOGIN = 'LOGIN';\nexport const REQUEST_API = 'REQUEST_API';\nexport const GET_CURRENCY = 'GET_CURRENCY';\nexport const SAVE_EXPENSE = 'SAVE_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const getCurrency = (currency) => ({ type: GET_CURRENCY, currency });\nexport const saveExpense = (expenseObj) => ({ type: SAVE_EXPENSE, expenseObj });\nexport const deleteExpense = (ObjRemainder) => ({ type: DELETE_EXPENSE, ObjRemainder });\n\nexport const toLogin = (email) => ({\n  type: LOGIN,\n  email,\n});\n\nexport function fetchAPI() {\n  return (dispatch) => fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((res) => res.json())\n    .then((curr) => dispatch(getCurrency(curr)));\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nimport { DELETE_EXPENSE, GET_CURRENCY, SAVE_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  // price: 0,\n  currencies: [],\n  // method: 'Dinheiro',\n  // tag: 'Alimentação',\n  // description: '',\n  expenses: [],\n};\n\nexport default function wallet(state = INITIAL_STATE, action) {\n  // console.log('walletAction', action);\n  // console.log('state', state.expenses);\n  switch (action.type) {\n  case GET_CURRENCY:\n    return {\n      // ...state, moeda: Object.keys(action.currency).filter((elem) => elem !== 'USDT'),\n      ...state, currencies: action.currency,\n    };\n  case SAVE_EXPENSE:\n    return {\n      ...state, expenses: [...state.expenses, action.expenseObj],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state, expenses: action.ObjRemainder,\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport propTypes from 'prop-types';\nimport { toLogin } from '../actions';\nimport './Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n    };\n\n    this.isLoginButtonDisabled = this.isLoginButtonDisabled.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n    this.loginImage = this.loginImage.bind(this);\n  }\n\n  onInputChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  isLoginButtonDisabled() {\n    const { email, password } = this.state;\n    const CINCO = 5;\n    const emailRegex = /\\S+@\\S+.\\S\\.+com/;\n    if (password.length > CINCO && emailRegex.test(email)) return false;\n    return true;\n  }\n\n  loginImage() {\n    return (\n      <div>\n        <img\n          src=\"https://woobewoo.com/wp-content/uploads/2018/06/exchange-rate-lg.jpg\"\n          className=\"login-image\"\n          alt=\"exchange rates\"\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { loginFunc } = this.props;\n    const { email } = this.state;\n    return (\n      <div className=\"main-container\">\n        <div className=\"login-page-fieldset\">\n          {this.loginImage()}\n          <label htmlFor=\"email-input\" className=\"login-page-label\">\n            <span className=\"login-login\">Email</span>\n            <input\n              type=\"email\"\n              name=\"email\"\n              className=\"login-page-input\"\n              id=\"email-input\"\n              data-testid=\"email-input\"\n              onChange={ this.onInputChange }\n            />\n          </label>\n          <label htmlFor=\"input-pass\" className=\"login-page-label\">\n            <span className=\"login-login\">Senha</span>\n            <input\n              type=\"password\"\n              name=\"password\"\n              className=\"login-page-input\"\n              id=\"input-pass\"\n              data-testid=\"password-input\"\n              onChange={ this.onInputChange }\n            />\n          </label>\n          <Link to=\"/TrybeWallet/carteira\">\n            <div className=\"login-page-label\">\n              <button\n                type=\"submit\"\n                className=\"login-page-enter-button\"\n                disabled={ this.isLoginButtonDisabled() }\n                onClick={ () => loginFunc(email) }\n              >\n                Entrar\n              </button>\n            </div>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginFunc: (email) => dispatch(toLogin(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  loginFunc: propTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n// import { fetchAPI } from '../actions';\n\nclass Currency extends Component {\n  constructor() {\n    super();\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  async componentDidMount() {\n    // const { currencyFetch } = this.props;\n    // await currencyFetch();\n  }\n\n  onInputChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { currencies, onInputChange } = this.props;\n    // console.log('currency', moeda);\n    return (\n      <div>\n        <label htmlFor=\"currency-input\">\n          Moeda:\n          <select\n            name=\"currency\"\n            // value='USD'\n            id=\"currency-input\"\n            data-testid=\"currency-input\"\n            onChange={ onInputChange }\n          >\n            {/* <option value=\"\" selected disabled hidden>Choose currency...</option> */}\n            {/* Object.keys(action.currency).filter((elem) => elem !== 'USDT') */}\n            {Object.keys(currencies).filter((elem) => elem !== 'USDT')\n              .map((currency) => (\n                <option key={ currency } value={ currency }>\n                  {' '}\n                  { currency }\n                  {' '}\n                </option>\n              ))}\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\n// const mapDispatchToProps = (dispatch) => ({\n//   currencyFetch: () => dispatch(fetchAPI()),\n// });\n\nexport default connect(mapStateToProps, null)(Currency);\n\nCurrency.propTypes = {\n  currencies: (PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object])),\n  // currencyFetch: PropTypes.func.isRequired,\n  onInputChange: PropTypes.func.isRequired,\n};\n\nCurrency.defaultProps = {\n  currencies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Category extends Component {\n  constructor() {\n    super();\n    this.state = {\n      categories: ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'],\n    };\n  }\n\n  render() {\n    const { categories } = this.state;\n    const { onInputChange, tag } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"tag-input\">\n          Categoria:\n          <select\n            name=\"tag\"\n            value={ tag }\n            id=\"tag-input\"\n            data-testid=\"tag-input\"\n            onChange={ onInputChange }\n          >\n            {categories.map((category, idx) => (\n              <option key={ idx } value={ category }>\n                {category}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   tag: state.wallet.tag,\n// });\n\nexport default connect()(Category);\n\nCategory.propTypes = {\n  onInputChange: PropTypes.func.isRequired,\n  tag: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Description extends Component {\n  render() {\n    const { onInputChange } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"description-input\">\n          Descrição:\n          <input\n            type=\"text\"\n            name=\"description\"\n            data-testid=\"description-input\"\n            onChange={ onInputChange }\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  description: state.wallet.description,\n});\n\nexport default connect(mapStateToProps)(Description);\n\nDescription.propTypes = {\n  onInputChange: PropTypes.func.isRequired,\n};\n","const arrayMethods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\nexport default arrayMethods;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport arrayMethods from '../data/arrayMethods';\n\nclass Method extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     methods: ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'],\n  //   };\n  // }\n\n  render() {\n    const { onInputChange } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"method\">\n          Método de pagamento\n          <select\n            name=\"method\"\n            // value={ metodo }\n            id=\"method\"\n            data-testid=\"method-input\"\n            onChange={ onInputChange }\n          >\n            {arrayMethods.map((method, idx) => (\n              <option key={ idx } value={ method }>\n                {method}\n              </option>\n            ))}\n          </select>\n        </label>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  method: state.wallet.method,\n});\n\nexport default connect(mapStateToProps)(Method);\n\nMethod.propTypes = {\n  onInputChange: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Price extends Component {\n  render() {\n    const { onInputChange, value } = this.props;\n    return (\n      <div>\n        <label htmlFor=\"value-input\">\n          Valor:\n          <input\n            name=\"value\"\n            value={ value }\n            type=\"number\"\n            data-testid=\"value-input\"\n            id=\"value-input\"\n            onChange={ onInputChange }\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = (state) => ({\n//   value: state.wallet.value,\n// });\n\nexport default connect()(Price);\n\nPrice.propTypes = {\n  onInputChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.sommationValue = this.sommationValue.bind(this);\n  }\n\n  sommationValue() {\n    const { expenses } = this.props;\n    const sum = expenses\n      .reduce((acc, curr) => acc\n        + ((curr.value) * curr.exchangeRates[curr.currency].ask), 0);\n\n    return sum;\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <div>\n        <header>\n          <div data-testid=\"email-field\">{`Email: ${email}`}</div>\n          <div>\n            Despesa Total:\n            {' '}\n            <input\n              data-testid=\"total-field\"\n              value={ this.sommationValue().toFixed(2) }\n              disabled\n            />\n            <span data-testid=\"header-currency-field\"> BRL </span>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  currencies: state.wallet.currencies,\n});\n\n// const mapDispatchToProps = (dispatch) => ({\n//   // totalExpenses: () => dispatch(sommationValue()),\n// });\n\nexport default connect(mapStateToProps)(Header);\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: (PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object])).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport './WalletTable.css';\nimport { deleteExpense } from '../actions';\n\nclass WalletTable extends Component {\n  constructor(props) {\n    super(props);\n    this.generateExpense = this.generateExpense.bind(this);\n    this.expenseDeletionButton = this.expenseDeletionButton.bind(this);\n    this.expenseEditButton = this.expenseEditButton.bind(this);\n  }\n\n  expenseDeletionButton({ target: { id } }) {\n    const { expenses, expenseDeletion } = this.props;\n    const removeExpense = expenses.filter((elem) => Number(elem.id) !== Number(id));\n\n    return expenseDeletion(removeExpense);\n  }\n\n  expenseEditButton({ target: { id } }) {\n    const { expenses } = this.props;\n    const editExpense = expenses.find((elem) => elem.id === id);\n    console.log(editExpense);\n  }\n\n  generateExpense() {\n    const { expenses } = this.props;\n    return (\n      expenses.map((elem) => (\n        <tbody key={ elem.id } id={ elem.id }>\n          <tr className=\"body-tr\">\n            <td>{elem.description}</td>\n            <td>{elem.tag}</td>\n            <td>{elem.method}</td>\n            <td>{`${elem.value}`}</td>\n            <td>{elem.exchangeRates[elem.currency].name.split('/')[0]}</td>\n            <td>{Number(elem.exchangeRates[elem.currency].ask).toFixed(2)}</td>\n            <td>\n              {`${Number(elem.exchangeRates[elem.currency].ask)\n                * Number(elem.value).toFixed(2)}`}\n            </td>\n            <td>Real</td>\n            <td>\n              {/* <button\n                type=\"button\"\n                data-testid=\"edit-btn\"\n                onClick={ this.expenseEditButton }\n              >\n                Editar\n              </button> */}\n              <button\n                type=\"button\"\n                data-testid=\"delete-btn\"\n                id={ elem.id }\n                onClick={ this.expenseDeletionButton }\n              >\n                Excluir\n              </button>\n            </td>\n          </tr>\n        </tbody>)));\n  }\n\n  render() {\n    return (\n      <div>\n        <table>\n          <thead>\n            <tr className=\"tr-class\">\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          {this.generateExpense()}\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  totalExpenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  expenseDeletion: (obj) => dispatch(deleteExpense(obj)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\n\nWalletTable.propTypes = {\n  expenses: (PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object])),\n  expenseDeletion: PropTypes.func,\n};\n\nWalletTable.defaultProps = {\n  expenses: [],\n  expenseDeletion: () => {},\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { fetchAPI, saveExpense } from '../actions';\nimport './wallet.css';\n\nimport Currency from '../components/Currency';\nimport Category from '../components/Category';\nimport Description from '../components/Description';\nimport Method from '../components/Method';\nimport Price from '../components/Price';\nimport Header from '../components/Header';\nimport WalletTable from '../components/WalletTable';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '0', // price\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n    this.onInputChange = this.onInputChange.bind(this);\n    this.saveCurrencyButton = this.saveCurrencyButton.bind(this);\n  }\n\n  componentDidMount() {\n    const { currencyFetch } = this.props;\n    currencyFetch();\n  }\n\n  onInputChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  saveCurrencyButton() {\n    const { id, value, description, currency, method, tag } = this.state;\n    const { currencies, expenseSaved, currencyFetch } = this.props;\n    currencyFetch();\n    expenseSaved({ id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: currencies });\n\n    this.setState({\n      id: id + 1,\n      value: '0',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n  }\n\n  render() {\n    const { email } = this.props;\n    const { value, tag } = this.state;\n    return (\n      <div>\n        <div className=\"header-walletBar-div\">\n          <Header email={ email } />\n          <form action=\"GET\" className=\"expenses-Form\">\n            <Price onInputChange={ this.onInputChange } value={ value } />\n            <Currency onInputChange={ this.onInputChange } />\n            <Method onInputChange={ this.onInputChange } />\n            <Category onInputChange={ this.onInputChange } tag={ tag } />\n            <Description onInputChange={ this.onInputChange } />\n            <button type=\"button\" onClick={ () => this.saveCurrencyButton() }>\n              Adicionar despesa\n            </button>\n          </form>\n        </div>\n        <WalletTable />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  currencyFetch: () => dispatch(fetchAPI()),\n  expenseSaved: (obj) => dispatch(saveExpense(obj)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  currencyFetch: PropTypes.func.isRequired,\n  expenseSaved: PropTypes.func.isRequired,\n  currencies: (PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object])),\n};\n\nWallet.defaultProps = {\n  currencies: [],\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/TrybeWallet\" element={ <Login /> } />\n      <Route exact path=\"/TrybeWallet/carteira\" element={ <Wallet /> } />\n    </Routes>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}